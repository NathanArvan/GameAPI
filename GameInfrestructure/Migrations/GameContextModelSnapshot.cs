// <auto-generated />
using System;
using GameInfrestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameInfrestructure.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CharacterItems", b =>
                {
                    b.Property<int>("CharacterIds")
                        .HasColumnType("int");

                    b.Property<int>("ItemIds")
                        .HasColumnType("int");

                    b.HasKey("CharacterIds", "ItemIds");

                    b.HasIndex("ItemIds");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("GameDomain.Abilities.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.HasKey("AbilityId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("GameDomain.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("GameDomain.Characters.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"), 1L, 1);

                    b.Property<int>("Accuracy")
                        .HasColumnType("int");

                    b.Property<int>("Actions")
                        .HasColumnType("int");

                    b.Property<int>("ArcaneVision")
                        .HasColumnType("int");

                    b.Property<decimal>("CarryingCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Evasion")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("ManaPoints")
                        .HasColumnType("int");

                    b.Property<int>("MartialVision")
                        .HasColumnType("int");

                    b.Property<int>("Movement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Poise")
                        .HasColumnType("int");

                    b.Property<int>("StaminaPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("TokenId");

                    b.ToTable("Character", (string)null);
                });

            modelBuilder.Entity("GameDomain.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("GameDomain.Items.Item", b =>
                {
                    b.Property<int?>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ItemId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("GameDomain.Maps.Map", b =>
                {
                    b.Property<int?>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MapId"), 1L, 1);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("MapId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("GameDomain.Tokens.Token", b =>
                {
                    b.Property<int?>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TokenId"), 1L, 1);

                    b.Property<int?>("MapId")
                        .HasColumnType("int");

                    b.Property<int?>("xPosition")
                        .HasColumnType("int");

                    b.Property<int?>("yPosition")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.HasIndex("MapId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("GameDomain.Tokens.TokenImage", b =>
                {
                    b.Property<int?>("TokenImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("TokenImageId"), 1L, 1);

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("TokenId")
                        .HasColumnType("int");

                    b.HasKey("TokenImageId");

                    b.HasIndex("TokenId")
                        .IsUnique()
                        .HasFilter("[TokenId] IS NOT NULL");

                    b.ToTable("TokenImages");
                });

            modelBuilder.Entity("ItemAbilities", b =>
                {
                    b.Property<int>("AbilityIds")
                        .HasColumnType("int");

                    b.Property<int>("ItemIds")
                        .HasColumnType("int");

                    b.HasKey("AbilityIds", "ItemIds");

                    b.HasIndex("ItemIds");

                    b.ToTable("ItemAbilities");
                });

            modelBuilder.Entity("CharacterItems", b =>
                {
                    b.HasOne("GameDomain.Characters.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDomain.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDomain.Characters.Character", b =>
                {
                    b.HasOne("GameDomain.Tokens.Token", "Token")
                        .WithMany("Characters")
                        .HasForeignKey("TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("GameDomain.Tokens.Token", b =>
                {
                    b.HasOne("GameDomain.Maps.Map", null)
                        .WithMany("Tokens")
                        .HasForeignKey("MapId");
                });

            modelBuilder.Entity("GameDomain.Tokens.TokenImage", b =>
                {
                    b.HasOne("GameDomain.Tokens.Token", null)
                        .WithOne("Image")
                        .HasForeignKey("GameDomain.Tokens.TokenImage", "TokenId");
                });

            modelBuilder.Entity("ItemAbilities", b =>
                {
                    b.HasOne("GameDomain.Abilities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilityIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameDomain.Items.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemIds")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameDomain.Maps.Map", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("GameDomain.Tokens.Token", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
